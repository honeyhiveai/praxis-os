# prAxIs OS - Python Project Configuration
# Code quality standards aligned with HoneyHive python-sdk

[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "praxis-os"
version = "1.0.0"
description = "AI-assisted development framework with RAG-powered workflows"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}

[tool.black]
line-length = 88
target-version = ['py311', 'py312', 'py313']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.git
  | \.tox
  | \.venv
  | venv
  | \.praxis-os
  | build
  | dist
  | __pycache__
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = [
    ".git/*",
    ".tox/*",
    ".venv/*",
    "venv/*",
    ".praxis-os/*",
    "build/*",
    "dist/*",
    "__pycache__/*"
]

[tool.pylint.main]
load-plugins = ["pylint.extensions.docparams"]
min-similarity-lines = 10
ignore-paths = [
    "^.git/.*$",
    "^.tox/.*$",
    "^.venv/.*$",
    "^venv/.*$",
    "^.praxis-os/.*$",
    "^build/.*$",
    "^dist/.*$",
]

[tool.pylint.messages_control]
# Disable specific checks that conflict with project patterns
disable = [
    "too-few-public-methods",  # Many dataclasses and simple classes
    "import-error",            # Handled by mypy and testing
]

# Goal: Achieve ≥10.0/10.0 pylint score
# Current: 8.33/10.0
# Path: Address violations systematically using standards docs

[tool.pylint.format]
max-line-length = 88  # Match Black

[tool.pylint.design]
max-args = 5           # Maximum function arguments
max-locals = 15        # Maximum local variables
max-branches = 12      # Maximum branches in function
max-statements = 50    # Maximum statements in function
max-attributes = 7     # Maximum instance attributes

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Enable gradually
ignore_missing_imports = true  # Many third-party packages lack types
strict_optional = true
check_untyped_defs = true
show_error_codes = true
warn_redundant_casts = true
warn_unused_ignores = true

# TYPE SAFETY REQUIREMENTS:
# - Zero mypy errors allowed (enforced in CI/CD)
# - All public APIs must have complete type annotations
# - All function parameters and returns must be typed
# 
# Gradual typing adoption - enable strictness over time
# Goal: Full strict = true compliance
# Current: Permissive for legacy code, but zero errors required

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--tb=short",
    "--cov=mcp_server",
    "--cov-report=term-missing",
    "--cov-report=html",
]
markers = [
    "unit: Unit tests (fast, isolated)",
    "integration: Integration tests (slower, real dependencies)",
    "asyncio: Async tests using pytest-asyncio",
    "browser: Tests requiring real browser installation (Playwright)",
]

[tool.pytest_asyncio]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["mcp_server"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
    "*/.tox/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false

# Coverage targets (align with python-sdk):
# - New code: ≥80% line coverage
# - Overall: ≥60% line coverage
# - Critical paths: 100% coverage

[tool.coverage.html]
directory = "htmlcov"

